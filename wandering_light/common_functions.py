import math
import statistics

from wandering_light.function_def import FunctionDef, FunctionDefSet

# Sample inputs and expected outputs for testing
SAMPLE_INPUTS = {
    "builtins.int": [0, 1, 2, 3, 4, 5, -1, -2],
    "builtins.float": [0.5, 2.5, 4.0, -0.5, -2.5],
    "builtins.str": ["", "a", "Ab", "hello world", "123", "123.45"],
    "builtins.bool": [True, False],
    "builtins.list": [[], [3, 1, 2], [1, 2, 3]],
    "builtins.tuple": [(), (1, 2, 3), ("a", "b", "c")],
    "builtins.set": [set(), {1}, {2}],
    "builtins.dict": [{}, {"a": 1}, {"x": 1, "y": 2}],
    "builtins.bytes": [b"", b"\x00\x01", b"abc"],
    "builtins.bytearray": [bytearray(), bytearray(b"\x00\x01"), bytearray(b"abc")],
    "builtins.complex": [1 + 2j, -1 + 0j, 0 - 3j],
    "builtins.range": [range(0), range(3), range(1, 4)],
}

EXPECTED_OUTPUTS = {
    "inc": [1, 2, 3, 4, 5, 6, 0, -1],
    "dec": [-1, 0, 1, 2, 3, 4, -2, -3],
    "double": [0, 2, 4, 6, 8, 10, -2, -4],
    "half": [0, 0, 1, 1, 2, 2, -1, -1],
    "square": [0, 1, 4, 9, 16, 25, 1, 4],
    "mod2": [0, 1, 0, 1, 0, 1, 1, 0],
    "neg": [0, -1, -2, -3, -4, -5, 1, 2],
    "abs": [0, 1, 2, 3, 4, 5, 1, 2],
    "sign": [0, 1, 1, 1, 1, 1, -1, -1],
    "f_reciprocal": [2.0, 0.4, 0.25, -2.0, -0.4],
    "f_abs_sqrt": [
        0.7071067811865476,
        1.5811388300841898,
        2.0,
        0.7071067811865476,
        1.5811388300841898,
    ],
    "f_fraction": [0.5, 0.5, 0.0, -0.5, -0.5],
    "f_trunc": [0, 2, 4, 0, -2],
    "f_round": [0, 2, 4, 0, -2],
    "f_mod1": [0.5, 0.5, 0.0, 0.5, 0.5],
    "upper": ["", "A", "AB", "HELLO WORLD", "123", "123.45"],
    "lower": ["", "a", "ab", "hello world", "123", "123.45"],
    "capitalize": ["", "A", "Ab", "Hello world", "123", "123.45"],
    "title": ["", "A", "Ab", "Hello World", "123", "123.45"],
    "strip": ["", "a", "Ab", "hello world", "123", "123.45"],
    "swapcase": ["", "A", "aB", "HELLO WORLD", "123", "123.45"],
    "reverse": ["", "a", "bA", "dlrow olleh", "321", "54.321"],
    "repeat": ["", "aa", "AbAb", "hello worldhello world", "123123", "123.45123.45"],
    "duplicate": ["", "aa", "AbAb", "hello worldhello world", "123123", "123.45123.45"],
    "length": [0, 1, 2, 11, 3, 6],
    "is_digit": [False, False, False, False, True, False],
    "is_alpha": [False, True, True, False, False, False],
    "count_a": [0, 1, 0, 0, 0, 0],
    "startswith_a": [False, True, False, False, False, False],
    "endswith_z": [False, False, False, False, False, False],
    "contains_space": [False, False, False, True, False, False],
    "bool_not": [False, True],
    "bool_to_int": [1, 0],
    "bool_to_str": ["True", "False"],
    "identity_int": [0, 1, 2, 3, 4, 5, -1, -2],
    "is_even": [True, False, True, False, True, False, False, True],
    "is_odd": [False, True, False, True, False, True, True, False],
    "int_to_bool": [False, True, True, True, True, True, True, True],
    "int_to_str": ["0", "1", "2", "3", "4", "5", "-1", "-2"],
    "f_abs": [0.5, 2.5, 4.0, 0.5, 2.5],
    "f_floor": [0, 2, 4, -1, -3],
    "f_ceil": [1, 3, 4, 0, -2],
    "f_square": [0.25, 6.25, 16.0, 0.25, 6.25],
    "is_lower": [False, True, False, True, False, False],
    "is_upper": [False, False, False, False, False, False],
    "is_space": [False, False, False, False, False, False],
    "is_title": [False, False, True, False, False, False],
    "is_numeric": [False, False, False, False, True, False],
    "is_positive": [False, True, True, True, True, True, False, False],
    "is_negative": [False, False, False, False, False, False, True, True],
    "int_to_float": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, -1.0, -2.0],
    "float_to_str": ["0.5", "2.5", "4.0", "-0.5", "-2.5"],
    "first_char": ["", "a", "A", "h", "1", "1"],
    "last_char": ["", "a", "b", "d", "3", "5"],
    "bool_identity": [True, False],
    "bool_to_float": [1.0, 0.0],
    "list_length": [0, 3, 3],
    "list_reverse": [[], [2, 1, 3], [3, 2, 1]],
    "list_sorted": [[], [1, 2, 3], [1, 2, 3]],
    "list_unique": [[], [3, 1, 2], [1, 2, 3]],
    "list_sum": [0, 6, 6],
    "list_is_empty": [True, False, False],
    "list_median": [
        float(statistics.median(x)) if x else 0.0
        for x in SAMPLE_INPUTS["builtins.list"]
    ],
    "list_tail": [x[1:] for x in SAMPLE_INPUTS["builtins.list"]],
    "tuple_length": [0, 3, 3],
    "tuple_reverse": [(), (3, 2, 1), ("c", "b", "a")],
    "tuple_to_list": [[], [1, 2, 3], ["a", "b", "c"]],
    "tuple_is_empty": [True, False, False],
    "set_size": [0, 1, 1],
    "set_is_empty": [True, False, False],
    "set_to_list": [[], [1], [2]],
    "dict_keys": [[], ["a"], ["x", "y"]],
    "dict_values": [[], [1], [1, 2]],
    "dict_items": [[], [("a", 1)], [("x", 1), ("y", 2)]],
    "dict_length": [0, 1, 2],
    "dict_is_empty": [True, False, False],
    "dict_keyset": [set(), {"a"}, {"x", "y"}],
    "bytes_length": [0, 2, 3],
    "bytes_to_hex": ["", "0001", "616263"],
    "bytes_upper": [b"", b"\x00\x01", b"ABC"],
    "bytes_is_empty": [True, False, False],
    "bytearray_length": [0, 2, 3],
    "bytearray_to_bytes": [b"", b"\x00\x01", b"abc"],
    "bytearray_reverse": [bytearray(b""), bytearray(b"\x01\x00"), bytearray(b"cba")],
    "complex_real": [1.0, -1.0, 0.0],
    "complex_imag": [2.0, 0.0, -3.0],
    "complex_abs": [2.23606797749979, 1.0, 3.0],
    "range_length": [0, 3, 3],
    "range_list": [[], [0, 1, 2], [1, 2, 3]],
    "range_sum": [0, 3, 6],
    "int_bit_length": [0, 1, 2, 2, 3, 3, 1, 2],
    "int_popcount": [0, 1, 1, 2, 1, 2, 1, 1],
    "int_is_power_of_two": [False, True, True, False, True, False, False, False],
    "int_clip_0_100": [0, 1, 2, 3, 4, 5, 0, 0],
    "f_log10": [
        math.log10(x) if x > 0 else 0.0 for x in SAMPLE_INPUTS["builtins.float"]
    ],
    "f_exp": [math.exp(x) for x in SAMPLE_INPUTS["builtins.float"]],
    "f_sin": [math.sin(x) for x in SAMPLE_INPUTS["builtins.float"]],
    "f_is_integer": [x.is_integer() for x in SAMPLE_INPUTS["builtins.float"]],
    "f_frac_percent": [
        int((x - int(x)) * 100) for x in SAMPLE_INPUTS["builtins.float"]
    ],
    "str_is_palindrome": [
        x.lower() == x.lower()[::-1] for x in SAMPLE_INPUTS["builtins.str"]
    ],
    "str_count_vowels": [
        sum(1 for c in x.lower() if c in "aeiou") for x in SAMPLE_INPUTS["builtins.str"]
    ],
    "str_remove_digits": [
        "".join(c for c in x if not c.isdigit()) for x in SAMPLE_INPUTS["builtins.str"]
    ],
    "str_reverse_words": [
        " ".join(x.split()[::-1]) for x in SAMPLE_INPUTS["builtins.str"]
    ],
    "str_to_list": [list(x) for x in SAMPLE_INPUTS["builtins.str"]],
    "str_hash": [hash(x) for x in SAMPLE_INPUTS["builtins.str"]],
    "list_max": [0 if not x else max(x) for x in SAMPLE_INPUTS["builtins.list"]],
    "list_min": [0 if not x else min(x) for x in SAMPLE_INPUTS["builtins.list"]],
    "tuple_count_none": [x.count(None) for x in SAMPLE_INPUTS["builtins.tuple"]],
    "tuple_to_index_dict": [
        dict(enumerate(x)) for x in SAMPLE_INPUTS["builtins.tuple"]
    ],
    "dict_freeze": [tuple(sorted(x.items())) for x in SAMPLE_INPUTS["builtins.dict"]],
    "dict_has_duplicate_values": [
        len(list(x.values())) != len(set(x.values()))
        for x in SAMPLE_INPUTS["builtins.dict"]
    ],
    "dict_flip": [{v: k for k, v in x.items()} for x in SAMPLE_INPUTS["builtins.dict"]],
    "bytes_reverse": [x[::-1] for x in SAMPLE_INPUTS["builtins.bytes"]],
    "bytes_is_ascii": [
        all(b < 128 for b in x) for x in SAMPLE_INPUTS["builtins.bytes"]
    ],
    "complex_conjugate": [x.conjugate() for x in SAMPLE_INPUTS["builtins.complex"]],
    "complex_phase": [
        math.atan2(x.imag, x.real) for x in SAMPLE_INPUTS["builtins.complex"]
    ],
    "range_max": [x[-1] if x else 0 for x in SAMPLE_INPUTS["builtins.range"]],
    "set_hash": [hash(frozenset(x)) for x in SAMPLE_INPUTS["builtins.set"]],
}

# Commonly used functions for various data types.
_basic_fns_list = [
    # Integer functions
    FunctionDef(
        name="inc",
        input_type="builtins.int",
        output_type="builtins.int",
        code="return x + 1",
    ),
    FunctionDef(
        name="dec",
        input_type="builtins.int",
        output_type="builtins.int",
        code="return x - 1",
    ),
    FunctionDef(
        name="double",
        input_type="builtins.int",
        output_type="builtins.int",
        code="return x * 2",
    ),
    FunctionDef(
        name="half",
        input_type="builtins.int",
        output_type="builtins.int",
        code="return x // 2",
    ),
    FunctionDef(
        name="square",
        input_type="builtins.int",
        output_type="builtins.int",
        code="return x * x",
    ),
    FunctionDef(
        name="mod2",
        input_type="builtins.int",
        output_type="builtins.int",
        code="return x % 2",
    ),
    FunctionDef(
        name="neg",
        input_type="builtins.int",
        output_type="builtins.int",
        code="return -x",
    ),
    FunctionDef(
        name="abs",
        input_type="builtins.int",
        output_type="builtins.int",
        code="return abs(x)",
    ),
    FunctionDef(
        name="sign",
        input_type="builtins.int",
        output_type="builtins.int",
        code="return 1 if x > 0 else (-1 if x < 0 else 0)",
    ),
    # Float functions
    FunctionDef(
        name="f_reciprocal",
        input_type="builtins.float",
        output_type="builtins.float",
        code="return float('inf') if x == 0 else 1.0 / x",
    ),
    FunctionDef(
        name="f_abs_sqrt",
        input_type="builtins.float",
        output_type="builtins.float",
        code="return abs(x) ** 0.5",
    ),
    FunctionDef(
        name="f_fraction",
        input_type="builtins.float",
        output_type="builtins.float",
        code="return x - int(x)",
    ),
    FunctionDef(
        name="f_trunc",
        input_type="builtins.float",
        output_type="builtins.int",
        code="return int(x)",
    ),
    FunctionDef(
        name="f_round",
        input_type="builtins.float",
        output_type="builtins.int",
        code="return round(x)",
    ),
    FunctionDef(
        name="f_mod1",
        input_type="builtins.float",
        output_type="builtins.float",
        code="return x % 1.0",
    ),
    # String functions
    FunctionDef(
        name="upper",
        input_type="builtins.str",
        output_type="builtins.str",
        code="return x.upper()",
    ),
    FunctionDef(
        name="lower",
        input_type="builtins.str",
        output_type="builtins.str",
        code="return x.lower()",
    ),
    FunctionDef(
        name="capitalize",
        input_type="builtins.str",
        output_type="builtins.str",
        code="return x.capitalize()",
    ),
    FunctionDef(
        name="title",
        input_type="builtins.str",
        output_type="builtins.str",
        code="return x.title()",
    ),
    FunctionDef(
        name="strip",
        input_type="builtins.str",
        output_type="builtins.str",
        code="return x.strip()",
    ),
    FunctionDef(
        name="swapcase",
        input_type="builtins.str",
        output_type="builtins.str",
        code="return x.swapcase()",
    ),
    FunctionDef(
        name="reverse",
        input_type="builtins.str",
        output_type="builtins.str",
        code="return x[::-1]",
    ),
    FunctionDef(
        name="repeat",
        input_type="builtins.str",
        output_type="builtins.str",
        code="return x * 2",
    ),
    FunctionDef(
        name="duplicate",
        input_type="builtins.str",
        output_type="builtins.str",
        code="return x + x",
    ),
    FunctionDef(
        name="length",
        input_type="builtins.str",
        output_type="builtins.int",
        code="return len(x)",
    ),
    FunctionDef(
        name="is_digit",
        input_type="builtins.str",
        output_type="builtins.bool",
        code="return x.isdigit()",
    ),
    FunctionDef(
        name="is_alpha",
        input_type="builtins.str",
        output_type="builtins.bool",
        code="return x.isalpha()",
    ),
    FunctionDef(
        name="count_a",
        input_type="builtins.str",
        output_type="builtins.int",
        code="return x.count('a')",
    ),
    FunctionDef(
        name="startswith_a",
        input_type="builtins.str",
        output_type="builtins.bool",
        code="return x.startswith('a')",
    ),
    FunctionDef(
        name="endswith_z",
        input_type="builtins.str",
        output_type="builtins.bool",
        code="return x.endswith('z')",
    ),
    FunctionDef(
        name="contains_space",
        input_type="builtins.str",
        output_type="builtins.bool",
        code="return ' ' in x",
    ),
    # Boolean functions
    FunctionDef(
        name="bool_not",
        input_type="builtins.bool",
        output_type="builtins.bool",
        code="return not x",
    ),
    FunctionDef(
        name="bool_to_int",
        input_type="builtins.bool",
        output_type="builtins.int",
        code="return int(x)",
    ),
    FunctionDef(
        name="bool_to_str",
        input_type="builtins.bool",
        output_type="builtins.str",
        code="return str(x)",
    ),
    # Additional functions
    FunctionDef(
        name="identity_int",
        input_type="builtins.int",
        output_type="builtins.int",
        code="return x",
    ),
    FunctionDef(
        name="is_even",
        input_type="builtins.int",
        output_type="builtins.bool",
        code="return x % 2 == 0",
    ),
    FunctionDef(
        name="is_odd",
        input_type="builtins.int",
        output_type="builtins.bool",
        code="return x % 2 == 1",
    ),
    FunctionDef(
        name="int_to_bool",
        input_type="builtins.int",
        output_type="builtins.bool",
        code="return bool(x)",
    ),
    FunctionDef(
        name="int_to_str",
        input_type="builtins.int",
        output_type="builtins.str",
        code="return str(x)",
    ),
    FunctionDef(
        name="f_abs",
        input_type="builtins.float",
        output_type="builtins.float",
        code="return abs(x)",
    ),
    FunctionDef(
        name="f_floor",
        input_type="builtins.float",
        output_type="builtins.int",
        code="return __import__('math').floor(x)",
    ),
    FunctionDef(
        name="f_ceil",
        input_type="builtins.float",
        output_type="builtins.int",
        code="return __import__('math').ceil(x)",
    ),
    FunctionDef(
        name="f_square",
        input_type="builtins.float",
        output_type="builtins.float",
        code="return x * x",
    ),
    FunctionDef(
        name="is_lower",
        input_type="builtins.str",
        output_type="builtins.bool",
        code="return x.islower()",
    ),
    FunctionDef(
        name="is_upper",
        input_type="builtins.str",
        output_type="builtins.bool",
        code="return x.isupper()",
    ),
    FunctionDef(
        name="is_space",
        input_type="builtins.str",
        output_type="builtins.bool",
        code="return x.isspace()",
    ),
    FunctionDef(
        name="is_title",
        input_type="builtins.str",
        output_type="builtins.bool",
        code="return x.istitle()",
    ),
    FunctionDef(
        name="is_numeric",
        input_type="builtins.str",
        output_type="builtins.bool",
        code="return x.isnumeric()",
    ),
    FunctionDef(
        name="is_positive",
        input_type="builtins.int",
        output_type="builtins.bool",
        code="return x > 0",
    ),
    FunctionDef(
        name="is_negative",
        input_type="builtins.int",
        output_type="builtins.bool",
        code="return x < 0",
    ),
    FunctionDef(
        name="int_to_float",
        input_type="builtins.int",
        output_type="builtins.float",
        code="return float(x)",
    ),
    FunctionDef(
        name="float_to_str",
        input_type="builtins.float",
        output_type="builtins.str",
        code="return str(x)",
    ),
    FunctionDef(
        name="first_char",
        input_type="builtins.str",
        output_type="builtins.str",
        code="return x[0] if x else ''",
    ),
    FunctionDef(
        name="last_char",
        input_type="builtins.str",
        output_type="builtins.str",
        code="return x[-1] if x else ''",
    ),
    FunctionDef(
        name="bool_identity",
        input_type="builtins.bool",
        output_type="builtins.bool",
        code="return x",
    ),
    FunctionDef(
        name="bool_to_float",
        input_type="builtins.bool",
        output_type="builtins.float",
        code="return 1.0 if x else 0.0",
    ),
    FunctionDef(
        name="list_length",
        input_type="builtins.list",
        output_type="builtins.int",
        code="return len(x)",
    ),
    FunctionDef(
        name="list_reverse",
        input_type="builtins.list",
        output_type="builtins.list",
        code="return x[::-1]",
    ),
    FunctionDef(
        name="list_sorted",
        input_type="builtins.list",
        output_type="builtins.list",
        code="return sorted(x)",
    ),
    FunctionDef(
        name="list_unique",
        input_type="builtins.list",
        output_type="builtins.list",
        code="return list(dict.fromkeys(x))",
    ),
    FunctionDef(
        name="list_sum",
        input_type="builtins.list",
        output_type="builtins.int",
        code="return sum(x) if x and all(isinstance(v, (int, float)) for v in x) else 0",
    ),
    FunctionDef(
        name="list_is_empty",
        input_type="builtins.list",
        output_type="builtins.bool",
        code="return len(x) == 0",
    ),
    FunctionDef(
        name="tuple_length",
        input_type="builtins.tuple",
        output_type="builtins.int",
        code="return len(x)",
    ),
    FunctionDef(
        name="tuple_reverse",
        input_type="builtins.tuple",
        output_type="builtins.tuple",
        code="return x[::-1]",
    ),
    FunctionDef(
        name="tuple_to_list",
        input_type="builtins.tuple",
        output_type="builtins.list",
        code="return list(x)",
    ),
    FunctionDef(
        name="tuple_is_empty",
        input_type="builtins.tuple",
        output_type="builtins.bool",
        code="return len(x) == 0",
    ),
    FunctionDef(
        name="set_size",
        input_type="builtins.set",
        output_type="builtins.int",
        code="return len(x)",
    ),
    FunctionDef(
        name="set_is_empty",
        input_type="builtins.set",
        output_type="builtins.bool",
        code="return len(x) == 0",
    ),
    FunctionDef(
        name="set_to_list",
        input_type="builtins.set",
        output_type="builtins.list",
        code="return list(x)",
    ),
    FunctionDef(
        name="dict_keys",
        input_type="builtins.dict",
        output_type="builtins.list",
        code="return list(x.keys())",
    ),
    FunctionDef(
        name="dict_values",
        input_type="builtins.dict",
        output_type="builtins.list",
        code="return list(x.values())",
    ),
    FunctionDef(
        name="dict_items",
        input_type="builtins.dict",
        output_type="builtins.list",
        code="return list(x.items())",
    ),
    FunctionDef(
        name="dict_length",
        input_type="builtins.dict",
        output_type="builtins.int",
        code="return len(x)",
    ),
    FunctionDef(
        name="dict_is_empty",
        input_type="builtins.dict",
        output_type="builtins.bool",
        code="return len(x) == 0",
    ),
    FunctionDef(
        name="dict_keyset",
        input_type="builtins.dict",
        output_type="builtins.set",
        code="return set(x.keys())",
    ),
    FunctionDef(
        name="bytes_length",
        input_type="builtins.bytes",
        output_type="builtins.int",
        code="return len(x)",
    ),
    FunctionDef(
        name="bytes_to_hex",
        input_type="builtins.bytes",
        output_type="builtins.str",
        code="return x.hex()",
    ),
    FunctionDef(
        name="bytes_upper",
        input_type="builtins.bytes",
        output_type="builtins.bytes",
        code="return x.upper()",
    ),
    FunctionDef(
        name="bytes_is_empty",
        input_type="builtins.bytes",
        output_type="builtins.bool",
        code="return len(x) == 0",
    ),
    FunctionDef(
        name="bytearray_length",
        input_type="builtins.bytearray",
        output_type="builtins.int",
        code="return len(x)",
    ),
    FunctionDef(
        name="bytearray_to_bytes",
        input_type="builtins.bytearray",
        output_type="builtins.bytes",
        code="return bytes(x)",
    ),
    FunctionDef(
        name="bytearray_reverse",
        input_type="builtins.bytearray",
        output_type="builtins.bytearray",
        code="return bytearray(x[::-1])",
    ),
    FunctionDef(
        name="complex_real",
        input_type="builtins.complex",
        output_type="builtins.float",
        code="return x.real",
    ),
    FunctionDef(
        name="complex_imag",
        input_type="builtins.complex",
        output_type="builtins.float",
        code="return x.imag",
    ),
    FunctionDef(
        name="complex_abs",
        input_type="builtins.complex",
        output_type="builtins.float",
        code="return abs(x)",
    ),
    FunctionDef(
        name="range_length",
        input_type="builtins.range",
        output_type="builtins.int",
        code="return len(x)",
    ),
    FunctionDef(
        name="range_list",
        input_type="builtins.range",
        output_type="builtins.list",
        code="return list(x)",
    ),
    FunctionDef(
        name="range_sum",
        input_type="builtins.range",
        output_type="builtins.int",
        code="return sum(x)",
    ),
    # ── int ───────────────────────────────────────────────────────────────────
    FunctionDef(
        name="int_bit_length",
        input_type="builtins.int",
        output_type="builtins.int",
        code="return x.bit_length()",
    ),
    FunctionDef(
        name="int_popcount",
        input_type="builtins.int",
        output_type="builtins.int",
        code="return x.bit_count()",
    ),
    FunctionDef(
        name="int_is_power_of_two",
        input_type="builtins.int",
        output_type="builtins.bool",
        code="return x > 0 and (x & (x - 1)) == 0",
    ),
    FunctionDef(
        name="int_clip_0_100",
        input_type="builtins.int",
        output_type="builtins.int",
        code="return 0 if x < 0 else (100 if x > 100 else x)",
    ),
    # ── float ─────────────────────────────────────────────────────────────────
    FunctionDef(
        name="f_log10",
        input_type="builtins.float",
        output_type="builtins.float",
        code="import math; return math.log10(x) if x > 0 else 0.0",
    ),
    FunctionDef(
        name="f_exp",
        input_type="builtins.float",
        output_type="builtins.float",
        code="import math; return math.exp(x)",
    ),
    FunctionDef(
        name="f_sin",
        input_type="builtins.float",
        output_type="builtins.float",
        code="import math; return math.sin(x)",
    ),
    FunctionDef(
        name="f_is_integer",
        input_type="builtins.float",
        output_type="builtins.bool",
        code="return x.is_integer()",
    ),
    FunctionDef(
        name="f_frac_percent",
        input_type="builtins.float",
        output_type="builtins.int",
        code="return int((x - int(x)) * 100)",
    ),
    # ── str ───────────────────────────────────────────────────────────────────
    FunctionDef(
        name="str_is_palindrome",
        input_type="builtins.str",
        output_type="builtins.bool",
        code="s=x.lower(); return s==s[::-1]",
    ),
    FunctionDef(
        name="str_count_vowels",
        input_type="builtins.str",
        output_type="builtins.int",
        code="return sum(1 for c in x.lower() if c in 'aeiou')",
    ),
    FunctionDef(
        name="str_remove_digits",
        input_type="builtins.str",
        output_type="builtins.str",
        code="return ''.join(c for c in x if not c.isdigit())",
    ),
    FunctionDef(
        name="str_reverse_words",
        input_type="builtins.str",
        output_type="builtins.str",
        code="return ' '.join(x.split()[::-1])",
    ),
    FunctionDef(
        name="str_to_list",
        input_type="builtins.str",
        output_type="builtins.list",
        code="return list(x)",
    ),
    FunctionDef(
        name="str_hash",
        input_type="builtins.str",
        output_type="builtins.int",
        code="return hash(x)",
    ),
    # ── list ──────────────────────────────────────────────────────────────────
    FunctionDef(
        name="list_max",
        input_type="builtins.list",
        output_type="builtins.int",
        code="return max(x) if x and all(isinstance(v, (int, float)) for v in x) else 0",
    ),
    FunctionDef(
        name="list_min",
        input_type="builtins.list",
        output_type="builtins.int",
        code="return min(x) if x and all(isinstance(v, (int, float)) for v in x) else 0",
    ),
    FunctionDef(
        name="list_tail",
        input_type="builtins.list",
        output_type="builtins.list",
        code="return x[1:]",
    ),
    FunctionDef(
        name="list_median",
        input_type="builtins.list",
        output_type="builtins.float",
        code="import statistics; return float(statistics.median(x)) if x else 0.0",
    ),
    # ── tuple ─────────────────────────────────────────────────────────────────
    FunctionDef(
        name="tuple_count_none",
        input_type="builtins.tuple",
        output_type="builtins.int",
        code="return x.count(None)",
    ),
    FunctionDef(
        name="tuple_to_index_dict",
        input_type="builtins.tuple",
        output_type="builtins.dict",
        code="return {i:v for i,v in enumerate(x)}",
    ),
    # ── dict ──────────────────────────────────────────────────────────────────
    FunctionDef(
        name="dict_freeze",
        input_type="builtins.dict",
        output_type="builtins.tuple",
        code="return tuple(sorted(x.items()))",
    ),
    FunctionDef(
        name="dict_has_duplicate_values",
        input_type="builtins.dict",
        output_type="builtins.bool",
        code="vals=list(x.values()); return len(vals)!=len(set(vals))",
    ),
    FunctionDef(
        name="dict_flip",
        input_type="builtins.dict",
        output_type="builtins.dict",
        code="return {v:k for k,v in x.items()}",
    ),
    # ── bytes ─────────────────────────────────────────────────────────────────
    FunctionDef(
        name="bytes_reverse",
        input_type="builtins.bytes",
        output_type="builtins.bytes",
        code="return x[::-1]",
    ),
    FunctionDef(
        name="bytes_is_ascii",
        input_type="builtins.bytes",
        output_type="builtins.bool",
        code="return all(b < 128 for b in x)",
    ),
    # ── complex ───────────────────────────────────────────────────────────────
    FunctionDef(
        name="complex_conjugate",
        input_type="builtins.complex",
        output_type="builtins.complex",
        code="return x.conjugate()",
    ),
    FunctionDef(
        name="complex_phase",
        input_type="builtins.complex",
        output_type="builtins.float",
        code="import math; return math.atan2(x.imag, x.real)",
    ),
    # ── range ─────────────────────────────────────────────────────────────────
    FunctionDef(
        name="range_max",
        input_type="builtins.range",
        output_type="builtins.int",
        code="return x[-1] if x else 0",
    ),
    # ── set ───────────────────────────────────────────────────────────────────
    FunctionDef(
        name="set_hash",
        input_type="builtins.set",
        output_type="builtins.int",
        code="return hash(frozenset(x))",
    ),
]

# Create a FunctionDefSet for better display
basic_fns = FunctionDefSet(_basic_fns_list)
